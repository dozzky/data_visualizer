import streamlit as st
import pandas as pd
import plotly.express as px
import json
from pathlib import Path
import re

st.set_page_config(page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤", layout="wide")
st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON", type="json")

if uploaded_file is None:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏. –ü—Ä–∏–º–µ—Ä –ª–µ–∂–∏—Ç –≤ –ø–∞–ø–∫–µ `data/example.json`.")
    example_path = Path("data/example.json")
    if example_path.exists():
        with open(example_path, "r", encoding="utf-8") as f:
            data = json.load(f)
        df = pd.DataFrame(data)
    else:
        st.stop()
else:
    data = json.load(uploaded_file)
    df = pd.DataFrame(data)

# === –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ –ø–æ–ª—è "–°—Å—ã–ª–∫–∞" ===
def extract_datetime(s: str):
    match = re.search(r"–æ—Ç (\d{2}\.\d{2}\.\d{4} \d{1,2}:\d{2}:\d{2})", s)
    if match:
        return pd.to_datetime(match.group(1), format="%d.%m.%Y %H:%M:%S", errors="coerce")
    return None

df["–î–∞—Ç–∞–î–æ–∫—É–º–µ–Ω—Ç–∞"] = df["–°—Å—ã–ª–∫–∞"].apply(extract_datetime)

# === –§–∏–ª—å—Ç—Ä—ã ===
with st.sidebar:
    st.header("–§–∏–ª—å—Ç—Ä—ã")
    selected_doc = st.multiselect("–î–æ–∫—É–º–µ–Ω—Ç (–°—Å—ã–ª–∫–∞)", df["–°—Å—ã–ª–∫–∞"].unique())
    selected_work = st.multiselect("–í–∏–¥ —Ä–∞–±–æ—Ç", df["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–í–∏–¥–†–∞–±–æ—Ç"].unique())
    selected_driver = st.multiselect("–í–æ–¥–∏—Ç–µ–ª—å", df["–í–æ–¥–∏—Ç–µ–ª—å"].unique())
    selected_equipment = st.multiselect("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", df["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"].unique())

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
if selected_doc:
    df = df[df["–°—Å—ã–ª–∫–∞"].isin(selected_doc)]
if selected_work:
    df = df[df["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–í–∏–¥–†–∞–±–æ—Ç"].isin(selected_work)]
if selected_driver:
    df = df[df["–í–æ–¥–∏—Ç–µ–ª—å"].isin(selected_driver)]
if selected_equipment:
    df = df[df["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"].isin(selected_equipment)]

if df.empty:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
    st.stop()

# === –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ===
numeric_cols = df.select_dtypes(include=["number"]).columns.tolist()
if not numeric_cols:
    st.error("–í –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤.")
    st.stop()

graph_type = st.radio("–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞", ["Scatter (—Ç–æ—á–∫–∏)", "Line (–ª–∏–Ω–∏—è)"], horizontal=True)

if graph_type == "Scatter (—Ç–æ—á–∫–∏)":
    col1, col2 = st.columns(2)
    with col1:
        x_param = st.selectbox("–û—Å—å X", numeric_cols, index=0)
    with col2:
        y_param = st.selectbox("–û—Å—å Y", numeric_cols, index=min(1, len(numeric_cols)-1))

    highlight_cols = [
        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–ì—Ä—É–∑–æ–æ–±–æ—Ä–æ—Ç",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–û–ø–µ—Ä–∞—Ü–∏–π–í—Å–µ–≥–æ",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã–í—Å–µ–≥–æ",
        "–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è–ü–æ–£—á–∞—Å—Ç–∫–∞–º–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
    ]

    if y_param in highlight_cols or x_param in highlight_cols:
        fig = px.scatter(
            df,
            x=x_param,
            y=y_param,
            color="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–í–∏–¥–†–∞–±–æ—Ç",
            hover_data=["–°—Å—ã–ª–∫–∞", "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–í–æ–¥–∏—Ç–µ–ª—å"]
        )
    else:
        fig = px.scatter(
            df,
            x=x_param,
            y=y_param,
            hover_data=["–°—Å—ã–ª–∫–∞", "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–í–æ–¥–∏—Ç–µ–ª—å"]
        )

elif graph_type == "Line (–ª–∏–Ω–∏—è)":
    y_param = st.selectbox("–ü–∞—Ä–∞–º–µ—Ç—Ä –ø–æ –æ—Å–∏ Y", numeric_cols, index=0)
    group_by = st.selectbox("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ", ["–ù–µ—Ç", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–í–∏–¥–†–∞–±–æ—Ç", "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–í–æ–¥–∏—Ç–µ–ª—å"])

    if group_by == "–ù–µ—Ç":
        fig = px.line(
            df.sort_values("–î–∞—Ç–∞–î–æ–∫—É–º–µ–Ω—Ç–∞"),
            x="–î–∞—Ç–∞–î–æ–∫—É–º–µ–Ω—Ç–∞",
            y=y_param,
            markers=True
        )
    else:
        fig = px.line(
            df.sort_values("–î–∞—Ç–∞–î–æ–∫—É–º–µ–Ω—Ç–∞"),
            x="–î–∞—Ç–∞–î–æ–∫—É–º–µ–Ω—Ç–∞",
            y=y_param,
            color=group_by,
            markers=True
        )

st.plotly_chart(fig, use_container_width=True)

# === –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö ===
with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
    st.dataframe(df, use_container_width=True)
