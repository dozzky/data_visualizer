import streamlit as st
import pandas as pd
import plotly.express as px
import json
from pathlib import Path
import re

st.set_page_config(page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤", layout="wide")
st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON", type="json")

if uploaded_file is None:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏. –ü—Ä–∏–º–µ—Ä –ª–µ–∂–∏—Ç –≤ –ø–∞–ø–∫–µ `data/example.json`.")
    example_path = Path("data/example.json")
    if example_path.exists():
        with open(example_path, "r", encoding="utf-8") as f:
            data = json.load(f)
        df = pd.DataFrame(data)
    else:
        st.stop()
else:
    data = json.load(uploaded_file)
    df = pd.DataFrame(data)

# === –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ –ø–æ–ª—è "–°—Å—ã–ª–∫–∞" ===
def extract_datetime(s: str):
    match = re.search(r"–æ—Ç (\d{2}\.\d{2}\.\d{4} \d{1,2}:\d{2}:\d{2})", s)
    if match:
        return pd.to_datetime(match.group(1), format="%d.%m.%Y %H:%M:%S", errors="coerce")
    return None

df["–î–∞—Ç–∞–î–æ–∫—É–º–µ–Ω—Ç–∞"] = df["–°—Å—ã–ª–∫–∞"].apply(extract_datetime)

# === –§–∏–ª—å—Ç—Ä—ã ===
with st.sidebar:
    st.header("–§–∏–ª—å—Ç—Ä—ã")
    selected_doc = st.multiselect("–î–æ–∫—É–º–µ–Ω—Ç (–°—Å—ã–ª–∫–∞)", df["–°—Å—ã–ª–∫–∞"].unique())
    selected_work = st.multiselect("–í–∏–¥ —Ä–∞–±–æ—Ç", df["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–í–∏–¥–†–∞–±–æ—Ç"].unique())
    selected_driver = st.multiselect("–í–æ–¥–∏—Ç–µ–ª—å", df["–í–æ–¥–∏—Ç–µ–ª—å"].unique())
    selected_equipment = st.multiselect("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", df["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"].unique())
    
    min_date, max_date = df["–î–∞—Ç–∞–î–æ–∫—É–º–µ–Ω—Ç–∞"].min(), df["–î–∞—Ç–∞–î–æ–∫—É–º–µ–Ω—Ç–∞"].max()
    date_range = st.date_input(
        "–ü–µ—Ä–∏–æ–¥ (–î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞)",
        value=(min_date, max_date),
        min_value=min_date,
        max_value=max_date
    )

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
if selected_doc:
    df = df[df["–°—Å—ã–ª–∫–∞"].isin(selected_doc)]
if selected_work:
    df = df[df["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–í–∏–¥–†–∞–±–æ—Ç"].isin(selected_work)]
if selected_driver:
    df = df[df["–í–æ–¥–∏—Ç–µ–ª—å"].isin(selected_driver)]
if selected_equipment:
    df = df[df["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"].isin(selected_equipment)]

if isinstance(date_range, tuple) and len(date_range) == 2:
    start_date, end_date = pd.to_datetime(date_range[0]), pd.to_datetime(date_range[1])
    df = df[(df["–î–∞—Ç–∞–î–æ–∫—É–º–µ–Ω—Ç–∞"] >= start_date) & (df["–î–∞—Ç–∞–î–æ–∫—É–º–µ–Ω—Ç–∞"] <= end_date)]

if df.empty:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
    st.stop()

# === KPI —Ä–∞—Å—á—ë—Ç—ã ===
df["KPI_–ª_–Ω–∞_—Ç–æ–Ω–Ω—É"] = df["–†–∞—Å—Ö–æ–¥–¢–æ–ø–ª–∏–≤–∞"] / df["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã–í—Å–µ–≥–æ"]
df["KPI_–ª_–Ω–∞_100—Ç–∫–º"] = df["–†–∞—Å—Ö–æ–¥–¢–æ–ø–ª–∏–≤–∞"] / (df["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–ì—Ä—É–∑–æ–æ–±–æ—Ä–æ—Ç"] / 100)
df["KPI_—Å—Ä–µ–¥_—Ç–æ–Ω–Ω_–Ω–∞_–æ–ø–µ—Ä–∞—Ü–∏—é"] = df["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã–í—Å–µ–≥–æ"] / df["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–û–ø–µ—Ä–∞—Ü–∏–π–í—Å–µ–≥–æ"]
df["KPI_–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_—Ç–Ω_–≤_—á–∞—Å"] = df["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã–í—Å–µ–≥–æ"] / df["–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è–ü–æ–£—á–∞—Å—Ç–∫–∞–º–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"]

# === –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ KPI ===
with st.expander("‚ÑπÔ∏è –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ KPI"):
    st.markdown("""
    - **–£–¥–µ–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞, –ª/—Ç–Ω** = `–†–∞—Å—Ö–æ–¥–¢–æ–ø–ª–∏–≤–∞ / –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã–í—Å–µ–≥–æ`  
    - **–£–¥–µ–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞, –ª/100—Ç–∫–º** = `–†–∞—Å—Ö–æ–¥–¢–æ–ø–ª–∏–≤–∞ / (–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–ì—Ä—É–∑–æ–æ–±–æ—Ä–æ—Ç / 100)`  
    - **–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–Ω–Ω –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é** = `–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã–í—Å–µ–≥–æ / –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–û–ø–µ—Ä–∞—Ü–∏–π–í—Å–µ–≥–æ`  
    - **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Ç–Ω/—á** = `–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã–í—Å–µ–≥–æ / –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è–ü–æ–£—á–∞—Å—Ç–∫–∞–º–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å`  
    """)

# === –û—Å–Ω–æ–≤–Ω—ã–µ KPI (—Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è) ===
st.subheader("üìà –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ KPI")

col1, col2, col3, col4 = st.columns(4)
col1.metric("–£–¥–µ–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞, –ª/—Ç–Ω", f"{df['KPI_–ª_–Ω–∞_—Ç–æ–Ω–Ω—É'].mean():.2f}")
col2.metric("–£–¥–µ–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞, –ª/100—Ç–∫–º", f"{df['KPI_–ª_–Ω–∞_100—Ç–∫–º'].mean():.2f}")
col3.metric("–°—Ä–µ–¥–Ω. —Ç–æ–Ω–Ω –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é", f"{df['KPI_—Å—Ä–µ–¥_—Ç–æ–Ω–Ω_–Ω–∞_–æ–ø–µ—Ä–∞—Ü–∏—é'].mean():.2f}")
col4.metric("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Ç–Ω/—á", f"{df['KPI_–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_—Ç–Ω_–≤_—á–∞—Å'].mean():.2f}")

with st.expander("üìä –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ KPI –ø–æ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏"):
    st.dataframe(df[[
        "–°—Å—ã–ª–∫–∞", "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–í–æ–¥–∏—Ç–µ–ª—å",
        "KPI_–ª_–Ω–∞_—Ç–æ–Ω–Ω—É", "KPI_–ª_–Ω–∞_100—Ç–∫–º",
        "KPI_—Å—Ä–µ–¥_—Ç–æ–Ω–Ω_–Ω–∞_–æ–ø–µ—Ä–∞—Ü–∏—é", "KPI_–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_—Ç–Ω_–≤_—á–∞—Å"
    ]], use_container_width=True)

# === KPI –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º (—Ä–µ–π—Ç–∏–Ω–≥) ===
st.subheader("üë∑ KPI –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º")

df_driver = df.groupby("–í–æ–¥–∏—Ç–µ–ª—å", as_index=False).agg({
    "KPI_–ª_–Ω–∞_—Ç–æ–Ω–Ω—É": "mean",
    "KPI_–ª_–Ω–∞_100—Ç–∫–º": "mean",
    "KPI_—Å—Ä–µ–¥_—Ç–æ–Ω–Ω_–Ω–∞_–æ–ø–µ—Ä–∞—Ü–∏—é": "mean",
    "KPI_–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_—Ç–Ω_–≤_—á–∞—Å": "mean"
})

st.dataframe(df_driver, use_container_width=True)

fig_driver = px.bar(
    df_driver.sort_values("KPI_–ª_–Ω–∞_—Ç–æ–Ω–Ω—É"),
    x="–í–æ–¥–∏—Ç–µ–ª—å",
    y="KPI_–ª_–Ω–∞_—Ç–æ–Ω–Ω—É",
    title="–†–µ–π—Ç–∏–Ω–≥ –ø–æ —É–¥–µ–ª—å–Ω–æ–º—É —Ä–∞—Å—Ö–æ–¥—É —Ç–æ–ø–ª–∏–≤–∞ (–ª/—Ç–Ω)",
    labels={"KPI_–ª_–Ω–∞_—Ç–æ–Ω–Ω—É": "–ª/—Ç–Ω"},
)
st.plotly_chart(fig_driver, use_container_width=True)

# === KPI –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞–º (–£—á–∞—Å—Ç–æ–∫–†–∞–±–æ—Ç + –£—á–∞—Å—Ç–æ–∫–†–∞–∑–≥—Ä—É–∑–∫–∏) ===
st.subheader("üöõ KPI –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞–º")

df["–ú–∞—Ä—à—Ä—É—Ç"] = df["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–£—á–∞—Å—Ç–æ–∫–†–∞–±–æ—Ç"] + " ‚Üí " + df["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–£—á–∞—Å—Ç–æ–∫–†–∞–∑–≥—Ä—É–∑–∫–∏"]

df_route = df.groupby("–ú–∞—Ä—à—Ä—É—Ç", as_index=False).agg({
    "KPI_–ª_–Ω–∞_—Ç–æ–Ω–Ω—É": "mean",
    "KPI_–ª_–Ω–∞_100—Ç–∫–º": "mean",
    "KPI_—Å—Ä–µ–¥_—Ç–æ–Ω–Ω_–Ω–∞_–æ–ø–µ—Ä–∞—Ü–∏—é": "mean",
    "KPI_–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_—Ç–Ω_–≤_—á–∞—Å": "mean"
})

st.dataframe(df_route, use_container_width=True)

fig_route = px.bar(
    df_route.sort_values("KPI_–ª_–Ω–∞_100—Ç–∫–º"),
    x="–ú–∞—Ä—à—Ä—É—Ç",
    y="KPI_–ª_–Ω–∞_100—Ç–∫–º",
    title="–†–µ–π—Ç–∏–Ω–≥ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ —É–¥–µ–ª—å–Ω–æ–º—É —Ä–∞—Å—Ö–æ–¥—É (–ª/100—Ç–∫–º)",
    labels={"KPI_–ª_–Ω–∞_100—Ç–∫–º": "–ª/100—Ç–∫–º"},
)
st.plotly_chart(fig_route, use_container_width=True)

# === –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–≥—Ä–∞—Ñ–∏–∫–∏) ===
st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")

numeric_cols = df.select_dtypes(include=["number"]).columns.tolist()
if not numeric_cols:
    st.error("–í –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤.")
    st.stop()

graph_type = st.radio("–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞", ["Scatter (—Ç–æ—á–∫–∏)", "Line (–ª–∏–Ω–∏—è)"], horizontal=True)

if graph_type == "Scatter (—Ç–æ—á–∫–∏)":
    col1, col2 = st.columns(2)
    with col1:
        x_param = st.selectbox("–û—Å—å X", numeric_cols, index=0)
    with col2:
        y_param = st.selectbox("–û—Å—å Y", numeric_cols, index=min(1, len(numeric_cols)-1))

    highlight_cols = [
        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–ì—Ä—É–∑–æ–æ–±–æ—Ä–æ—Ç",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–û–ø–µ—Ä–∞—Ü–∏–π–í—Å–µ–≥–æ",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã–í—Å–µ–≥–æ",
        "–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è–ü–æ–£—á–∞—Å—Ç–∫–∞–º–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
    ]

    if y_param in highlight_cols or x_param in highlight_cols:
        fig = px.scatter(
            df,
            x=x_param,
            y=y_param,
            color="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–í–∏–¥–†–∞–±–æ—Ç",
            hover_data=["–°—Å—ã–ª–∫–∞", "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–í–æ–¥–∏—Ç–µ–ª—å"]
        )
    else:
        fig = px.scatter(
            df,
            x=x_param,
            y=y_param,
            hover_data=["–°—Å—ã–ª–∫–∞", "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–í–æ–¥–∏—Ç–µ–ª—å"]
        )

elif graph_type == "Line (–ª–∏–Ω–∏—è)":
    y_param = st.selectbox("–ü–∞—Ä–∞–º–µ—Ç—Ä –ø–æ –æ—Å–∏ Y", numeric_cols, index=0)
    group_by = st.selectbox("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ", ["–ù–µ—Ç", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ–û–ø–µ—Ä–∞—Ü–∏–∏–í–∏–¥–†–∞–±–æ—Ç", "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–í–æ–¥–∏—Ç–µ–ª—å"])

    if group_by == "–ù–µ—Ç":
        fig = px.line(
            df.sort_values("–î–∞—Ç–∞–î–æ–∫—É–º–µ–Ω—Ç–∞"),
            x="–î–∞—Ç–∞–î–æ–∫—É–º–µ–Ω—Ç–∞",
            y=y_param,
            markers=True,
            hover_data=["–°—Å—ã–ª–∫–∞", "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–í–æ–¥–∏—Ç–µ–ª—å"]
        )
    else:
        fig = px.line(
            df.sort_values("–î–∞—Ç–∞–î–æ–∫—É–º–µ–Ω—Ç–∞"),
            x="–î–∞—Ç–∞–î–æ–∫—É–º–µ–Ω—Ç–∞",
            y=y_param,
            color=group_by,
            markers=True,
            hover_data=["–°—Å—ã–ª–∫–∞", "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–í–æ–¥–∏—Ç–µ–ª—å"]
        )

st.plotly_chart(fig, use_container_width=True)

# === –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö ===
with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
    st.dataframe(df, use_container_width=True)
